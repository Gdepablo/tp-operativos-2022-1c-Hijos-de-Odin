#include "kernel.h"

/*
 TIPO: HILO

 DESCRIPCION: PASA DE READY A EXECUTING, ALGORITMO DE CORTO PLAZO FIFO

 PARAMETROS: NINGUNO

 CUANDO SE EJECUTA: CUANDO SE VA EL PROCESO QUE ESTABA EN EXECUTE
*/
void* ready_a_executing();

/*
 TIPO: HILO

 DESCRIPCION: PASA DE READY A EXECUTE A READY O A BLOCKED SEGUN CORRESPONDA

 PARAMETROS: NINGUNO

 CUANDO SE EJECUTA: CUANDO EL CPU AVISA QUE SE EJECUTO LA INSTRUCCION I/O O CUANDO HAY QUE DESALOJAR AL PROCESO (SRT)
*/
void executing_a_ready();

/*
 TIPO: FUNCION

 DESCRIPCION: PASA DE EXECUTING A READY, ALGORITMO DE CORTO PLAZO FIFO

 PARAMETROS: NINGUNO

 CUANDO SE EJECUTA: NO SE
*/
void* executing_a_ready_fifo();

/*
 TIPO: FUNCION

 DESCRIPCION: PASA DE EXECUTING A READY, ALGORITMO DE CORTO PLAZO SRT

 PARAMETROS: NINGUNO

 CUANDO SE EJECUTA: CUANDO HAY QUE DESALOJAR AL QUE ESTA EJECUTANDOSE, POR ENCONTRAR UNA RAFAGA ESTIMADA MENOR
*/
void* executing_a_ready_srt();

/*
 TIPO: FUNCION

 DESCRIPCION: PASA DE EXECUTING A BLOCKED
uint32_t calcular_rafaga(t_pcb pcb)
 PARAMETROS: NINGUNO

 CUANDO SE EJECUTA: CUANDO EL CPU AVISA QUE HAY QUE BLOQUEAR EL PROCESO (EL PROCESO EJECUTO LA INSTRUCCION I/O)
*/
void * executing_a_blocked_srt();

/*
 TIPO:

 DESCRIPCION:

 PARAMETROS: NINGUNO

 CUANDO SE EJECUTA:
*/

t_pcb* algoritmo_sjf();

void* comparar_rafagas(void* pcb1, void* pcb2);
void asignar_pcb_ejecucion(t_pcb* pcb);
extern uint32_t calcular_rafaga(t_pcb* pcb);
void enviar_a_CPU(t_pcb* pcb);
bool sacar_proceso(void* pcb_void);




